* Python
** Lambdas and Map, Filter and Reduce
*** map
#+begin_src python :results output
items = [1,2,3,4,5,6,7,8,9]
print(map(lambda x: x**2, items))
#+end_src

#+RESULTS:
: [1, 4, 9, 16, 25, 36, 49, 64, 81]

*** filter
#+begin_src python :results output
items = range(-5, 5)
print(filter(lambda x: x<=0, items))
#+end_src

#+RESULTS:
: [-5, -4, -3, -2, -1, 0]

*** reduce
#+begin_src python :results output
items = [5, 4, 0, 3, 5, 0, 2, 0, 0, 2, 2, 4, 3, 0, 2, 3]
print(reduce(lambda x, y: x+y, items))
#+end_src

#+RESULTS:
: 35

*** flatten list
#+begin_src python :results output
import functools
import operator
grid = [[5, 4, 0, 3], [5, 0, 2, 0], [0, 2, 2, 4], [3, 0, 2, 3]]
items = [[1,2],[3,4], [789, 43, 32]]
print sum(items, list())
print sum(grid, list())
print functools.reduce(operator.iconcat, items, list())
#+end_src

#+RESULTS:
: [1, 2, 3, 4, 789, 43, 32]
: [5, 4, 0, 3, 5, 0, 2, 0, 0, 2, 2, 4, 3, 0, 2, 3]
: [1, 2, 3, 4, 789, 43, 32]

** Working with strings
#+begin_src python :results output
my_book = ["hola", "que", "tal", "que", "tal", "vas", "vas", "a", "francia", "o", "vas", "a", "espana"]
print(len(set(my_book)))
print(len(my_book))


#+end_src

#+RESULTS:
: 8
: 13

#+begin_src python :results output
def lexical_sweep(text, samples=10):
    '''
    Lexical sweep.
    '''
    log_behaviour_start = 5000
    sweep_values = []
    log_behaviour_range = len(text) - log_behaviour_start
    log_step = log_behaviour_range/(samples - 1)
    if len(text) > 10000 and samples >= 2:
        for sample_size in xrange(
                log_behaviour_start,
                len(text) - 1,
                log_step):
            x_sample = sample_size
            y_sample = len(set(text[0:sample_size]))
            sweep_values.append([x_sample, y_sample])
        return sweep_values
    return False

#+end_src

** LeetCode
*** DONE twoSum
    CLOSED: [2019-11-25 Mon 16:54]
    #+begin_src python :results output
# -*- coding: utf-8 -*-

def twoSum(nums, target):
    numsset = set(nums)
    for index, value in enumerate(nums):
        if (target - value) in numsset:
            if index != nums.index(target-value):
                return [index, nums.index(target-value)]

print twoSum([3, 3], 6)
print twoSum([2, 7, 11, 15], 9)
my_list = [576, 782, 3213, 1234314, 545, 54326]
my_indexed_list = [[counter, value] for counter, value in enumerate(my_list)]
#print my_indexed_list
#+end_src

#+RESULTS:
: [1, 0]
: [0, 1]
*** DONE oddCells
    CLOSED: [2019-11-25 Mon 16:54]
#+begin_src python :results output
# -*- coding: utf-8 -*-
def oddCells(n, m, indices):
    matrix = [ [ 0 for i in range(n) ] for j in range(m) ]
    for index in indices:
        if index[0] != index[1]:
            pass

#def addValueToColumn(array, column):

n = 2
m = 3
indices = [[0,1],[1,1]]
# Expected result: 6
matrix = [ [ 0 for i in range(n) ] for j in range(m) ]
matrix = [ [ i+1 for i in range(n) ] for j in range(m) ]
print matrix
#+end_src

#+RESULTS:
: [[1, 2], [1, 2], [1, 2]]
*** DONE defunge
    CLOSED: [2019-11-25 Mon 16:54]
    #+begin_src python :results output
# -*- coding: utf-8 -*-
import re
def defunge(address):
    return re.sub("\.", "[.]", addres)
#+end_src
*** DONE distributeCandies
    CLOSED: [2019-11-25 Mon 16:54]
    #+begin_src python :results output
# -*- coding: utf-8 -*-
def distributeCandies(candies, num_people):
    people = [[index, 0] for index, _ in enumerate(range(num_people))]
    quantity_given = 0
    while(candies):
        for index, net_value in people:
            if (candies - quantity_given > 0):
                quantity_given += 1
            else:
                quantity_given = candies
            people[index][1] += quantity_given
            candies -= quantity_given
    return [value for index, value in people]

def test_distributeCandies():
    assert distributeCandies(10, 4) == [1, 2, 3, 4]

num_people = 4
people = [[index, 0] for index, _ in enumerate(range(num_people))]
print people
print distributeCandies(7, 4)
#+end_src

#+RESULTS:
: [[0, 0], [1, 0], [2, 0], [3, 0]]
: [1, 2, 3, 1]

Con _
#+begin_quote
Status: Accepted (27/27)

Runtime: 40 ms, faster than 77.35% of Python3 submissions.

Memory Usage: 12.9 MB, less than 100.00% of Python3 submissions.
#+end_quote

Sin _
#+begin_quote

#+end_quote
*** longestCommonPrefix
    #+begin_src python :results output
# -*- coding: utf-8 -*-
def longestCommonPrefix(strs):

#+end_src
*** DONE Jewels and Stones
    CLOSED: [2019-11-25 Mon 16:54]
    #+begin_src python :results output
# -*- coding: utf-8 -*-
import re
def numJewelsInStones(J, S):
    jewels = J
    stones = S
    hits = 0
    for jewel in jewels:
        hits += len(re.findall(jewel, stones))
    return hits
def test_numJewelsInStones():
    assert numJewelsInStones(J = "aA", S = "aAAbbbb") == 3
    assert numJewelsInStones(J = "z", S = "ZZ") == 0

test_numJewelsInStones()
print numJewelsInStones(J = "aA", S = "aAAbbbb")
print numJewelsInStones(J = "z", S = "ZZ")
#+end_src

#+RESULTS:
: 3
: 0

*** DONE maxIncreaseKeepingSkyline
    CLOSED: [2019-11-25 Mon 16:54]
    #+begin_src python :results output
# -*- coding: utf-8 -*-
def skyline(grid):
    row_maxes = [max(row) for row in grid]
    col_maxes = [max(column) for column in zip(*grid)]
    return row_maxes, col_maxes

def maxIncreaseKeepingSkyline(grid):
    flatten_grid = sum(increaseKeepingSkyline(grid), [])
    return reduce(lambda x, y: x + y, flatten_grid)

def increaseKeepingSkyline(grid):
    row_maxes, col_maxes = skyline(grid)
    delta_grid = [[min(row_maxes[r], col_maxes[c]) - value for c, value in enumerate(row)] for r, row in enumerate(grid)]
    return delta_grid

def test_maxIncreaseKeepingSkyline():
    assert maxIncreaseKeepingSkyline(grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]) == 35

test_maxIncreaseKeepingSkyline()
grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
print maxIncreaseKeepingSkyline(grid)
#print sum(increaseKeepingSkyline(grid), [])
#print reduce(lambda x, y: x + y, maxIncreaseKeepingSkyline(grid))
#+end_src

#+RESULTS:
: 35

**** What does ** (double star/asterisk) and * (star/asterisk) do for parameters?
     #+begin_src python :results output
# -*- coding: utf-8 -*-
def foo(*args):
    for a in args:
        print a


foo(1)
foo(1,2,3)

def bar(**kwargs):
    for a in kwargs:
        print a, kwargs[a]

bar(name='one', age=27)
#+end_src

#+RESULTS:
: 1
: 1
: 2
: 3
: age 27
: name one

*** DONE minTimeToVisitAllPoints
    CLOSED: [2019-11-26 Tue 10:10]
#+begin_src python :results output
# -*- coding: utf-8 -*-
def distanceBetweenPoints(origin, destination):
    return map(lambda x: abs(x[0] - x[1]), [[x, y] for x,y in zip(origin, destination)])
def timeToCoverDistance(distance):
    return max(distance[0], distance[1])
def timeToVisitAPoint(origin, destination):
    distance = distanceBetweenPoints(origin, destination)
    return timeToCoverDistance(distance)
def minTimeToVisitAllPoints(points):
    distance = 0
    for index, point in enumerate(points):
        if index != len(points) - 1:
            distance += timeToVisitAPoint(point, points[index + 1])
    return distance

def minTimeToVisitAllPointsReduce(points):
    pass

def test_minTimeToVisitAllPoints():
    assert minTimeToVisitAllPoints([[1,1],[3,4],[-1,0]]) == 7
#test_minTimeToVisitAllPoints()
print timeToCoverDistance([90, 40])
print timeToVisitAPoint([45, 45], [90, 49])
print distanceBetweenPoints([1,1], [-2, 4])
print minTimeToVisitAllPoints([[1,1],[3,4],[-1,0]])
print minTimeToVisitAllPointsReduce([[1,1],[3,4],[-1,0]])
#+end_src

#+RESULTS:
: 90
: 45
: [3, 3]
: 7
: None

*** DONE isMatch
    CLOSED: [2019-11-27 Wed 10:38]
    #+begin_src python :results output
# -*- coding: utf-8 -*-
import re
def isMatch(s, p):
    if re.search(r'a*', s):
        return True
    return False
def test_isMatch():
    assert isMatch("aa", "a*") == True
#test_isMatch()
pattern = re.compile(r'a*')
print re.search(r'a*', 'aa')
#+end_src

#+RESULTS:
: <_sre.SRE_Match object at 0x7fc2e57e8b28>

*** TODO addTwoNumbers

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

    #+begin_src python :results output
# -*- coding: utf-8 -*-
# Definition for singly-linked list.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class ListNode:
    def __init__(self, data):
        self.val = data
        self.next = None
        return

class LinkedList:
    def __init__(self, initializer_list=None):
        self.head = None
        self.tail = None
        if isinstance(initializer_list, list):
            for item in initializer_list:
                self.add_item(item)
        if isinstance(initializer_list, ListNode):
            self.add_item(item)
        if isinstance(initializer_list, LinkedList):
            self = initializer_list
        return

    def add_item(self, item):
        if not isinstance(item, ListNode):
            item = ListNode(item)
        if self.head is None:
            self.head = item
        else:
            self.tail.next = item
        self.tail = item

    def get_head():
        return self.head

def linked_list_to_list(llist):
    my_list = list()
    current_node = llist.head
    while current_node :
        my_list.append(current_node.val)
        current_node = current_node.next
    return my_list

def list_to_number(my_list):
    my_number = int()
    order = 0
    for number in my_list:
        my_number += number*(10**order)
        order += 1
    return my_number

def number_to_list(num):
    pos_nums = []
    while num:
        pos_nums.append(num % 10)
        num = num // 10
    return list(pos_nums)

class Solution:
    def addTwoNumbers(self, l1, l2):
        number1 = list_to_number(linked_list_to_list(l1))
        number2 = list_to_number(linked_list_to_list(l2))
        result_number = number1 + number2
        return LinkedList(number_to_list(result_number)).get_head()

my_solution = Solution()
print my_solution.addTwoNumbers([2, 4, 3], [5, 6, 4])
#+end_src

#+RESULTS:

*** hasCycle
    #+begin_src python :results output
# -*- coding: utf-8 -*-
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def hasCycle(self, head):
        nodes_seen = set()
        while head:
            if hash(head) in nodes_seen:
                return True
            else:
                nodes_seen.add(hash(head))
            head = head.next
        return False

    def hasCycle(self, head):
        if not head or not head.next:
            return False
        slow = head
        fast = head.next
        while slow is not fast:
            if not fast or not fast.next:
                return False
            slow = slow.next
            fast = fast.next.next
        return True
#+end_src

*** detectCycle
    #+begin_src python :results output
# -*- coding: utf-8 -*-
def detectCycle(self, head):
        if not head or not head.next:
            return None
        nodes_seen = set()
        while head:
            if hash(head) in nodes_seen:
                return head
            else:
                nodes_seen.add(hash(head))
            head = head.next
        return None

    def hasCycle(self, head):
        if not head or not head.next:
            return None
        slow = head
        fast = head.next
        while slow is not fast:
            if not fast or not fast.next:
                return None
            slow = slow.next
            fast = fast.next.next
        return slow
#+end_src

*** findMedianSortedArrays
    #+begin_src python :results output
# -*- coding: utf-8 -*-
def findMedianSortedArrays(list1, list2):
    joined_list = sorted(list1 + list2)
    # Odd number of items
    n_items = len(joined_list)
    if n_items%2 == 1:
        return joined_list[n_items/2]
    return (joined_list[n_items/2] + joined_list[n_items/2-1])/2.0

def test_findMedianSortedArrays():
    assert findMedianSortedArrays([1, 3], [2]) == 2
    assert findMedianSortedArrays([1, 2], [3, 4]) == 2.5
test_findMedianSortedArrays()
#+end_src

#+RESULTS:

*** Intersection
    #+begin_src python :results output
# -*- coding: utf-8 -*-
def getIntersectionNode(self, headA, headB):
        if not headA or not headB:
            return None
        aux_A = headA
        aux_B = headB
        while aux_A and aux_B:
            if aux_A is aux_B:
                return aux_A
            if aux_A.next is None:
                last_A = aux_A
                aux_A = headB
            else:
                aux_A = aux_A.next
            if aux_B.next is None:
                last_B = aux_B
                aux_B = headA
            else:
                aux_B = aux_B.next
            try:
                if last_A is not last_B:
                    return None
            except UnboundLocalError:
                pass
#+end_src

*** longestPalindrome
    #+begin_src python :results output
# -*- coding: utf-8 -*-
class Solution:
    def longestPalindrome(self, s):

def findPalindrome(s):

#+end_src

** Sandbox
   #+begin_src python :results output
# -*- coding: utf-8 -*-

#+end_src

* C++
** Maps
   #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h>
   #+HEADER: :flags -std=c++11
   #+begin_src C++ :results verbatim
#include <iostream>
#include <map>
#include <string>
#include <iterator>
#include <algorithm>
int main() {

std::map<std::string, int> mapOfWordCount;
// Insert Element in map
mapOfWordCount.insert(std::pair<std::string, int>("first", 1));
mapOfWordCount.insert(std::pair<std::string, int>("second", 2));
mapOfWordCount.insert(std::pair<std::string, int>("third", 3));
mapOfWordCount.insert(std::pair<std::string, int>("forth", 4));
mapOfWordCount.insert(std::pair<std::string, int>("third", 5));
// Create a map iterator and point to beginning of map
std::map<std::string, int>::iterator it = mapOfWordCount.begin();
// Iterate over the map using Iterator till end.
while (it != mapOfWordCount.end())
{
// Accessing KEY from element pointed by it.
std::string word = it->first;
// Accessing VALUE from element pointed by it.
int count = it->second;
std::cout << word << " :: " << count << std::endl;
// Increment the Iterator to point to next entry
it++;
}
return 0;
}
   #+end_src

   #+RESULTS:
   : first :: 1
   : forth :: 4
   : second :: 2
   : third :: 3
** warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
   #+begin_quote
       *((uint64_t*)&sit_record->_trading_status_str[8]) = 0;
                                                       ^
   #+end_quote
** Compare
   #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory>
   #+HEADER: :flags -std=c++11
   #+begin_src C++ :results output
std::string first = "lol";
std::string second = "lol";
if (!first.compare(second)) {
  std::cout << "comparison success" << "\n";
}
else {
  std::cout << "comparison fail" << "\n";
}
   #+end_src

   #+RESULTS:
   : comparison success
** substring
   #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory>
   #+HEADER: :flags -std=c++11
   #+begin_src C++ :results output
std::string EURUSD = "EURUSD";
std::string EURUS = "EURUS";
std::string EUR = "EU";
std::cout << EURUSD.substr(0, 3) << "\n";
std::cout << EURUSD.substr(3, 3) << "\n";
std::cout << EURUS.substr(0, 3) << "\n";
std::cout << EURUS.substr(3, 3) << "\n";
//std::cout << EUR.substr(0, 3) << "\n";
//std::cout << EUR.substr(3, 3) << "\n";
   #+end_src

   #+RESULTS:
** Boost
*** Version
    #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory> <bits/stdc++.h> <set>
    #+HEADER: :flags -std=c++17
    #+begin_src C++ :results output
#include <boost/version.hpp>
std::cout << "Using Boost "
          << BOOST_VERSION / 100000     << "."  // major version
          << BOOST_VERSION / 100 % 1000 << "."  // minor version
          << BOOST_VERSION % 100                // patch level
          << std::endl;
    #+end_src

    #+RESULTS:
    : Using Boost 1.58.0

** warning: array subscript is above array bounds [-Warray-bounds]
   #+begin_quote
_read_buffer[OMS::BufferSize_DEFAULT] = {0};;
                                    ^
   #+end_quote

** Member initializer lists
#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h>
#+HEADER: :flags -std=c++11
#+begin_src C++
class person
{
    std::string name;
    int age;

public:

    person(const std::string& name, int age) : name(name), age(age)
    {
      std::cout << "Name: " << name << "\n";
      std::cout << "Age: " << age << "\n";
    }
};

int main()
{
    person a("Bjarne Stroustrup", 60);
    person b(a);   // What happens here?
    b = a;         // And here?
}
#+end_src

#+RESULTS:
| Name: | Bjarne | Stroustrup |
| Age:  |     60 |            |
** Explicit
   #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h>
   #+HEADER: :flags -std=c++11
   #+begin_src C++
class Foo
{
public:
  // explicit Foo (int foo) : m_foo (foo) will give:
  // /tmp/babel-ob0oRu/C-src-vorwOb.cpp:39:12: error: could not convert ‘42’ from ‘int’ to ‘Foo’
  // DoBar (42);
  //          ^
  // single parameter constructor, can be used as an implicit conversion
  Foo (int foo) : m_foo (foo)
  {
    std::cout << "m_foo: " << foo << "\n";
  }

  int GetFoo () { return m_foo; }

private:
  int m_foo;
};

void DoBar (Foo foo)
{
  int i = foo.GetFoo ();
}

int main ()
{
  DoBar (42);
}
   #+end_src

   #+RESULTS:
** Why is processing a sorted array faster than processing an unsorted array?
#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h>
#+HEADER: :flags -std=c++11
#+begin_src C++
#include <algorithm>
#include <ctime>
#include <iostream>

int main()
{
    // Generate data
    const unsigned arraySize = 32768;
    int data[arraySize];

    for (unsigned c = 0; c < arraySize; ++c)
      data[c] = std::rand() % 256;

    // !!! With this, the next loop runs faster.
    //std::sort(data, data + arraySize); //6.6553s, without 19.456s

    // Test
    clock_t start = clock();
    long long sum = 0;

    for (unsigned i = 0; i < 100000; ++i)
    {
        // Primary loop
        for (unsigned c = 0; c < arraySize; ++c)
        {
            if (data[c] >= 128)
                sum += data[c];
        }
    }

    double elapsedTime = static_cast<double>(clock() - start) / CLOCKS_PER_SEC;

    std::cout << elapsedTime << std::endl;
    std::cout << "sum = " << sum << std::endl;
}
#+end_src

#+RESULTS:
| 19.2552 |   |              |
|     sum | = | 314931600000 |
** Virtual
#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h>
#+HEADER: :flags -std=c++11
#+begin_src C++ :results output
class Animal
{
public:
  Animal() {};
  ~Animal() {};
  virtual void eat() { std::cout << "I'm eating generic food.\n"; }
};

class Cat : public Animal
{
public:
  Cat() {};
  ~Cat() {};
  void eat() { std::cout << "I'm eating a rat.\n"; }
};

int main() {
  Animal *animal = new Animal;
  //Cat cat;
  //Animal cat;
  Animal *cat = new Cat;
  animal->eat(); // outputs: "I'm eating generic food."
  cat->eat();    // outputs: "I'm eating generic food."
}
#+end_src

#+RESULTS:
: I'm eating generic food.
: I'm eating a rat.

#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h>
#+HEADER: :flags -std=c++11
#+begin_src C++ :results output
class Base
{
public:
  void Method1 ()  {  std::cout << "Base::Method1" << std::endl;  }
  virtual void Method2 ()  {  std::cout << "Base::Method2" << std::endl;  }
};

class Derived : public Base
{
public:
  void Method1 ()  {  std::cout << "Derived::Method1" << std::endl;  }
  void Method2 ()  {  std::cout << "Derived::Method2" << std::endl;  }
};

Base* obj = new Derived ();
//  Note - constructed as Derived, but pointer stored as Base*

obj->Method1 ();  //  Prints "Base::Method1"
obj->Method2 ();  //  Prints "Derived::Method2"
#+end_src

#+RESULTS:
: Base::Method1
: Derived::Method2
** TODO Reflexion
#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory>
#+HEADER: :flags -std=c++11
#+begin_src C++ :results output
#include <boost/fusion/sequence.hpp>
#include <boost/fusion/include/sequence.hpp>
#include <string>
#include <iostream>

struct Base { char a; };            // Adapt

void print(Base const& b) { boost::fusion::for_each<Base>(b, Print()); }

int main(){
  Base my_struct;
  my_struct.a = "a";
  print(my_struct);
}
#+end_src

#+RESULTS:
** Strings and chars and ASCII
   #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory> <bits/stdc++.h> <set>
   #+HEADER: :flags -std=c++11
   #+begin_src C++ :results output
std::string my_string = "Roland";
char my_char = my_string[0];
std::cout << my_char;
   #+end_src

   #+RESULTS:
   : R


#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory> <bits/stdc++.h> <set>
#+HEADER: :flags -std=c++11
#+begin_src C++ :results output
int asciiValue = 65;
char character = char(asciiValue);
std::cout << character << "\n"; // output: A
std::cout << char(90) << "\n"; // output: Z
int side = 49;
char char_side = char(side);
std::cout << char_side << "\n";
#+end_src

#+RESULTS:
: A
: Z
: 1


** Design patterns
*** Creational Patterns
**** Builder
**** Factory
**** Abstract Factory
**** Prototype
**** Singleton
*** Structural Patterns
**** Adapter
**** Bridge
**** Composite
**** Decorator
**** Facade
**** Flyweight
**** Proxy
**** Curiously Recurring Template
**** Interface-based Programming (IBP)
*** Behavioral Patterns
**** Chain of Responsibility
**** Command
**** Interpreter
**** Iterator
**** Mediator
**** Memento
**** Observer
**** State
**** Strategy
**** Template Method
**** Visitor
**** Model-View-Controller (MVC)
*** Kopimi
Programming Patterns
"To understand is to perceive patterns"

—Isaiah Berlin
Software design patterns are abstractions that help structure system designs. While not new, since the concept was already described by Christopher Alexander in its architectural theories, it only gathered some traction in programming due to the publication of Design Patterns: Elements of Reusable Object-Oriented Software book in October 1994 by Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides, known as the Gang of Four (GoF), that identifies and describes 23 classic software design patterns.

A design pattern is neither a static solution, nor is it an algorithm. A pattern is a way to describe and address by name a repeatable solution or approach to a common design problem, that is, a common way to solve a generic problem (how generic or specific the pattern is depends on how restricted the target goal is). Patterns can emerge on their own or by design. This is why design patterns are useful as an abstraction over the implementation and a help at design stage. With this concept, an easier way to facilitate communication over a design choice as normalization technique is given so that every person can share the design concept.

Depending on the design problem they address, design patterns can be classified in different categories, of which the main categories are:

Creational Patterns
Structural Patterns
Behavioral Patterns.
Patterns are commonly found in objected-oriented programming languages like C++ or Java. They can be seen as a template for how to solve a problem that occurs in many different situations or applications. It is not code reuse, as it usually does not specify code, but code can be easily created from a design pattern. Object-oriented design patterns typically show relationships and interactions between classes or objects without specifying the final application classes or objects that are involved.

Each design pattern consists of the following parts:

Problem/requirement
To use a design pattern, we need to go through a mini analysis design that may be coded to test out the solution. This section states the requirements of the problem we want to solve. This is usually a common problem that will occur in more than one application.
Forces
This section states the technological boundaries, that helps and guides the creation of the solution.
Solution
This section describes how to write the code to solve the above problem. This is the design part of the design pattern. It may contain class diagrams, sequence diagrams, and or whatever is needed to describe how to code the solution.
Design patterns can be considered as a standardization of commonly agreed best practices to solve specific design problems. One should understand them as a way to implement good design patterns within applications. Doing so will reduce the use of inefficient and obscure solutions. Using design patterns speeds up your design and helps to communicate it to other programmers.

Creational Patterns
In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.

In this section we assume that the reader has enough familiarity with functions, global variables, stack vs. heap, classes, pointers, and static member functions as introduced before.

As we will see there are several creational design patterns, and all will deal with a specific implementation task, that will create a higher level of abstraction to the code base, we will now cover each one.

Builder
The Builder Creational Pattern is used to separate the construction of a complex object from its representation so that the same construction process can create different objects representations.

Problem
We want to construct a complex object, however we do not want to have a complex constructor member or one that would need many arguments.
Solution
Define an intermediate object whose member functions define the desired object part by part before the object is available to the client. Builder Pattern lets us defer the construction of the object until all the options for creation have been specified.
#include <string>
#include <iostream>
#include <memory>
using namespace std;

// "Product"
class Pizza
{
public:
	void setDough(const string& dough)
	{
		m_dough = dough;
	}
	void setSauce(const string& sauce)
	{
		m_sauce = sauce;
	}
	void setTopping(const string& topping)
	{
		m_topping = topping;
	}
	void open() const
	{
		cout << "Pizza with " << m_dough << " dough, " << m_sauce << " sauce and "
			<< m_topping << " topping. Mmm." << endl;
	}
private:
	string m_dough;
	string m_sauce;
	string m_topping;
};

// "Abstract Builder"
class PizzaBuilder
{
public:
	virtual ~PizzaBuilder() {};

	Pizza* getPizza()
	{
		return m_pizza.release();
	}
	void createNewPizzaProduct()
	{
		m_pizza = make_unique<Pizza>();
	}
	virtual void buildDough() = 0;
	virtual void buildSauce() = 0;
	virtual void buildTopping() = 0;
protected:
	unique_ptr<Pizza> m_pizza;
};

//----------------------------------------------------------------

class HawaiianPizzaBuilder : public PizzaBuilder
{
public:
	virtual ~HawaiianPizzaBuilder() {};

	virtual void buildDough()
	{
		m_pizza->setDough("cross");
	}
	virtual void buildSauce()
	{
		m_pizza->setSauce("mild");
	}
	virtual void buildTopping()
	{
		m_pizza->setTopping("ham+pineapple");
	}
};

class SpicyPizzaBuilder : public PizzaBuilder
{
public:
	virtual ~SpicyPizzaBuilder() {};

	virtual void buildDough()
	{
		m_pizza->setDough("pan baked");
	}
	virtual void buildSauce()
	{
		m_pizza->setSauce("hot");
	}
	virtual void buildTopping()
	{
		m_pizza->setTopping("pepperoni+salami");
	}
};

//----------------------------------------------------------------

class Cook
{
public:
	void openPizza()
	{
		m_pizzaBuilder->getPizza()->open();
	}
	void makePizza(PizzaBuilder* pb)
	{
		m_pizzaBuilder = pb;
		m_pizzaBuilder->createNewPizzaProduct();
		m_pizzaBuilder->buildDough();
		m_pizzaBuilder->buildSauce();
		m_pizzaBuilder->buildTopping();
	}
private:
	PizzaBuilder* m_pizzaBuilder;
};

int main()
{
	Cook cook;
	HawaiianPizzaBuilder hawaiianPizzaBuilder;
	SpicyPizzaBuilder    spicyPizzaBuilder;

	cook.makePizza(&hawaiianPizzaBuilder);
	cook.openPizza();

	cook.makePizza(&spicyPizzaBuilder);
	cook.openPizza();
}
You can also use the latest version c++17 standard

#include <iostream>
#include <memory>
class Pizza{
public:
    void setDough(const std::string& dough){
        m_dough = dough;
    }
    void setSauce(const std::string& sauce){
        m_sauce = sauce;
    }
    void setTopping(const std::string& topping){
        m_topping = topping;
    }
    void open() const {
        std::cout<<"The Pizza have "<<
        m_dough<<" dough, "<<
        m_sauce<<" sauce, "<<
        m_topping<<" topping."<<
        std::endl;
    }
private:
    std::string m_dough;
    std::string m_sauce;
    std::string m_topping;
};

class PizzaBuilder{
public:
    virtual ~PizzaBuilder() = default;
    void createNewPizza(){
        m_pizza = std::make_unique<Pizza>();
    }
    Pizza* getPizza() {
        return m_pizza.release();
    }
    virtual void buildDough() = 0;
    virtual void buildSauce() = 0;
    virtual void buildTopping() = 0;
protected:
    std::unique_ptr<Pizza> m_pizza;
};

class HawaiianPizzaBuilder:public PizzaBuilder{
public:
    ~HawaiianPizzaBuilder() override = default;
    void buildDough() override {
        m_pizza->setDough("Hawaiian dough");
    }
    void buildSauce() override {
        m_pizza->setSauce("Hawaiian sauce");
    }
    void buildTopping() override {
        m_pizza->setTopping("Hawaiian topping");
    }
};

class SpicyPizzaBuilder:public PizzaBuilder{
public:
    ~SpicyPizzaBuilder() override = default;
    void buildDough() override {
        m_pizza->setDough("Spicy dough");
    }
    void buildSauce() override {
        m_pizza->setSauce("Spicy sauce");
    }
    void buildTopping() override {
        m_pizza->setTopping("Spicy topping");
    }
};

class Cook{
public:
    void openPizza() const {
        m_pizzaBuilder->getPizza()->open();
    }
    void createPizza(PizzaBuilder* pizzaBuilder){
        m_pizzaBuilder = pizzaBuilder;
        m_pizzaBuilder->createNewPizza();
        m_pizzaBuilder->buildDough();
        m_pizzaBuilder->buildSauce();
        m_pizzaBuilder->buildTopping();
    }
private:
    PizzaBuilder* m_pizzaBuilder;
};

int main(){
    Cook cook{};
    HawaiianPizzaBuilder hawaiianPizzaBuilder;
    cook.createPizza(&hawaiianPizzaBuilder);
    cook.openPizza();

    SpicyPizzaBuilder spicyPizzaBuilder;
    cook.createPizza(&spicyPizzaBuilder);
    cook.openPizza();
}
//console output
//The Pizza have Hawaiian dough dough, Hawaiian sauce sauce, Hawaiian topping topping.
//The Pizza have Spicy dough dough, Spicy sauce sauce, Spicy topping topping.
Factory
Definition: A utility class that creates an instance of a class from a family of derived classes

Abstract Factory
Definition: A utility class that creates an instance of several families of classes. It can also return a factory for a certain group.

The Factory Design Pattern is useful in a situation that requires the creation of many different types of objects, all derived from a common base type. The Factory Method defines a method for creating the objects, which subclasses can then override to specify the derived type that will be created. Thus, at run time, the Factory Method can be passed a description of a desired object (e.g., a string read from user input) and return a base class pointer to a new instance of that object. The pattern works best when a well-designed interface is used for the base class, so there is no need to cast the returned object.

Problem
We want to decide at run time what object is to be created based on some configuration or application parameter. When we write the code, we do not know what class should be instantiated.
Solution
Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
In the following example, a factory method is used to create laptop or desktop computer objects at run time.

Let's start by defining Computer, which is an abstract base class (interface) and its derived classes: Laptop and Desktop.

 class Computer
 {
 public:
     virtual void Run() = 0;
     virtual void Stop() = 0;

     virtual ~Computer() {}; /* without this, you do not call Laptop or Desktop destructor in this example! */
 };
 class Laptop: public Computer
 {
 public:
     void Run() override {mHibernating = false;};
     void Stop() override {mHibernating = true;};
     virtual ~Laptop() {}; /* because we have virtual functions, we need virtual destructor */
 private:
     bool mHibernating; // Whether or not the machine is hibernating
 };
 class Desktop: public Computer
 {
 public:
     void Run() override {mOn = true;};
     void Stop() override {mOn = false;};
     virtual ~Desktop() {};
 private:
     bool mOn; // Whether or not the machine has been turned on
 };
The actual ComputerFactory class returns a Computer, given a real world description of the object.

 class ComputerFactory
 {
 public:
     static Computer *NewComputer(const std::string &description)
     {
         if(description == "laptop")
             return new Laptop;
         if(description == "desktop")
             return new Desktop;
         return nullptr;
     }
 };
Let's analyze the benefits of this design. First, there is a compilation benefit. If we move the interface Computer into a separate header file with the factory, we can then move the implementation of the NewComputer() function into a separate implementation file. Now the implementation file for NewComputer() is the only one that requires knowledge of the derived classes. Thus, if a change is made to any derived class of Computer, or a new Computer subtype is added, the implementation file for NewComputer() is the only file that needs to be recompiled. Everyone who uses the factory will only care about the interface, which should remain consistent throughout the life of the application.

Also, if there is a need to add a class, and the user is requesting objects through a user interface, no code calling the factory may be required to change to support the additional computer type. The code using the factory would simply pass on the new string to the factory, and allow the factory to handle the new types entirely.

Imagine programming a video game, where you would like to add new types of enemies in the future, each of which has different AI functions and can update differently. By using a factory method, the controller of the program can call to the factory to create the enemies, without any dependency or knowledge of the actual types of enemies. Now, future developers can create new enemies, with new AI controls and new drawing member functions, add it to the factory, and create a level which calls the factory, asking for the enemies by name. Combine this method with an XML description of levels, and developers could create new levels without having to recompile their program. All this, thanks to the separation of creation of objects from the usage of objects.

Another example:

#include <stdexcept>
#include <iostream>
#include <memory>
using namespace std;

class Pizza {
public:
	virtual int getPrice() const = 0;
	virtual ~Pizza() {};  /* without this, no destructor for derived Pizza's will be called. */
};

class HamAndMushroomPizza : public Pizza {
public:
	virtual int getPrice() const { return 850; };
	virtual ~HamAndMushroomPizza() {};
};

class DeluxePizza : public Pizza {
public:
	virtual int getPrice() const { return 1050; };
	virtual ~DeluxePizza() {};
};

class HawaiianPizza : public Pizza {
public:
	virtual int getPrice() const { return 1150; };
	virtual ~HawaiianPizza() {};
};

class PizzaFactory {
public:
	enum PizzaType {
		HamMushroom,
		Deluxe,
		Hawaiian
	};

	static unique_ptr<Pizza> createPizza(PizzaType pizzaType) {
		switch (pizzaType) {
		case HamMushroom: return make_unique<HamAndMushroomPizza>();
		case Deluxe:      return make_unique<DeluxePizza>();
		case Hawaiian:    return make_unique<HawaiianPizza>();
		}
		throw "invalid pizza type.";
	}
};

/*
#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory>
#+HEADER: :flags -std=c++11
#+begin_src C++ :results output

#+end_src
** ABS
   #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory>
   #+HEADER: :flags -std=c++11
   #+begin_src C++ :results output
std::cout << std::numeric_limits<int64_t>::max() << "\n";
std::cout << std::numeric_limits<int64_t>::min() << "\n";
std::cout << std::abs(std::numeric_limits<int64_t>::max()) << "\n";
std::cout << std::abs(std::numeric_limits<int64_t>::min()) << "\n";
   #+end_src

   #+RESULTS:
   : 9223372036854775807
   : -9223372036854775808
   : 9223372036854775807
   : -9223372036854775808
** Operator overloading
*** ostream
    #+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory> <bits/stdc++.h> <set>
    #+HEADER: :flags -std=c++11
    #+begin_src C++ :results output

// C++ program to print vector objects
// by overloading "<<" operator
#include <iostream>
#include <vector>
using namespace std;

// C++ template to print vector container elements
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v)
{
    os << "[";
    for (int i = 0; i < v.size(); ++i) {
        os << v[i];
        if (i != v.size() - 1)
            os << ", ";
    }
    os << "]\n";
    return os;
}

// Driver code
int main()
{
    vector<int> vec{ 4, 2, 17, 11, 15 };

    // Printing the elements directly
    cout << vec;

    return 0;
}

    #+end_src

    #+RESULTS:
    : [4, 2, 17, 11, 15]



#+HEADER: :includes <iostream> <numeric> <vector> <stdexcept> <fstream> <sstream> <map> <string> <algorithm> <stdio.h> <memory> <bits/stdc++.h> <set>
#+HEADER: :flags -std=c++11
#+begin_src C++ :results output
auto v = std::vector<int>{1, 2, 3};
std::copy(begin(v), end(v), std::ostream_iterator<int>(std::cout, " "));
#+end_src

#+RESULTS:
: 1 2 3

* Bash
* Lisp
* SQL
